{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/clean-blog/_config.yml","hash":"cd689b9900dbd12b8eb6fca6e6b655ebab080b09","modified":1513584761025},{"_id":"themes/clean-blog/README.md","hash":"861dd2f959ab75d121226f4f3e2f61f4bc95fddb","modified":1495366547000},{"_id":"source/tags/index.md","hash":"f3ab7937d268b37492ca510bd9e309b4c142bb77","modified":1513585081041},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1512380298845},{"_id":"source/_posts/test.md","hash":"de9db3b93c31a8ac5f8d77d416c11f749e50e8f6","modified":1512381478042},{"_id":"source/categories/index.md","hash":"84d27dcf311fe3bcfb71fbddd82cb1ef98963459","modified":1513585159899},{"_id":"themes/clean-blog/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1495366547000},{"_id":"themes/clean-blog/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1495366547000},{"_id":"themes/clean-blog/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1495366547000},{"_id":"themes/clean-blog/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1495366547000},{"_id":"themes/clean-blog/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1495366547000},{"_id":"themes/clean-blog/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1495366547000},{"_id":"themes/clean-blog/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1495366547000},{"_id":"themes/clean-blog/LICENSE","hash":"8726b416df4f067cff579e859f05c4b594b8be09","modified":1495366547000},{"_id":"themes/clean-blog/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1495366547000},{"_id":"themes/clean-blog/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1495366547000},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1495366547000},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1495366547000},{"_id":"themes/clean-blog/_config.yml.bak","hash":"a5e80c8ca3f198eaf165a0e76447fcc606251521","modified":1513136526169},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"da2f9018047924ddaf376aee5996c7ddc06cebc1","modified":1495366547000},{"_id":"themes/clean-blog/layout/index.ejs","hash":"87995288ca6f95a04add641727aedd3f6afa55eb","modified":1495366547000},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1495366547000},{"_id":"source/_posts/ExportExcelUtil.md","hash":"ac962967c12a44e652b66a844201c366d0856e95","modified":1513579203137},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"f2ef73afc3d275333329bb30b9369b82e119da76","modified":1495366547000},{"_id":"themes/clean-blog/layout/page.ejs","hash":"591af587e1aae962950de7e79bd25c1f060c69ac","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"3d8d98c6545b8332a6d6ed4f8b00327df03ea945","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"80970a6cfbf9b1abe0c472636b321a9be08fdc43","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"e433df4e245e2d4c628052c6e59966563542d94d","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"6136434be09056c1466149cecb3cc2e80d107999","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"d252fb1a41890e6481bb054f9cc4ceec3c0b0ed9","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"21e4f28909f4a79ff7d9f10bdfef6a8cb11632bf","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"0e7aa9da47f29b2312d9d3165c067576ebca77cf","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"3a7eb32f2cc540746c9e11010a4513b832743d1e","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/tag-category-index.ejs","hash":"10cdc1b7866999c714a666557c150d2c79c1fba9","modified":1495366547000},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"ba299316400499e9ede154e9627cafb7ce411888","modified":1495366547000},{"_id":"themes/clean-blog/source/css/article.styl","hash":"f5294d7a3d6127fcb287de3ff0c12aebb1766c7b","modified":1495366547000},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"892f55e8a71f2e23a52e48e217dad3303bbad913","modified":1495366547000},{"_id":"themes/clean-blog/source/css/style.styl","hash":"c40dc495a41007d21c59f342ee42b2d31d7b5ff4","modified":1495366547000},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"cd82df5ca8dfbcfec12d833f01adfac00878e835","modified":1495366547000},{"_id":"themes/clean-blog/source/css/base.styl","hash":"f0a6fcf58fe515e1359acde0ed34081f580ec7a3","modified":1495366547000},{"_id":"themes/clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1495366547000},{"_id":"themes/clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1495366547000},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1495366547000},{"_id":"public/archives/index.html","hash":"da994582e6e47308bbf3c6a70e09251e1b741ff4","modified":1518329171916},{"_id":"public/tags/index.html","hash":"9db3afb535d5af759d3e51ce565e72a9a42620f5","modified":1518329171970},{"_id":"public/categories/index.html","hash":"188bdd53b380fe6a8cb77e9281339eb3bb80ed16","modified":1518329171979},{"_id":"public/2017/12/04/hello-world/index.html","hash":"2146afd1ca08867d31223a01dcb9c19f38cf3790","modified":1518329171980},{"_id":"public/index.html","hash":"5d5bd156bbbc594623474047bda79bbd612f7afc","modified":1518329171980},{"_id":"public/archives/2017/index.html","hash":"812e67fa4a4f14616476bc8907451ab8d5c83031","modified":1518329171980},{"_id":"public/2017/12/06/ExportExcelUtil/index.html","hash":"99005b55cb1f3cf5f859dad5fde76a4327594e53","modified":1518329171980},{"_id":"public/2017/12/04/test/index.html","hash":"a7c58eed09d333e154cfa16aabb713b0341b5492","modified":1518329171982},{"_id":"public/archives/2017/12/index.html","hash":"c89a4198f6f8b821193d23a4c6be30d5fe3df492","modified":1518329171982},{"_id":"public/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1518329171982},{"_id":"public/css/mixins.css","hash":"45146e7f4346351cd7f364de344aecf9574475f9","modified":1518329172256},{"_id":"public/css/article.css","hash":"f0ee490e1207191946fffc9444f891e9b7ae7289","modified":1518329172256},{"_id":"public/css/base.css","hash":"5bdbdf83ad61e80c537bd75b5442c8b0aac1e0f6","modified":1518329172257},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1518329172257},{"_id":"public/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1518329172260},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1518329172350}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-12-18T08:18:01.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-12-18 16:18:01\n---\n","updated":"2017-12-18T08:18:01.041Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjdfll7220000jstt3i1agxym","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-12-18T08:19:19.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-12-18 16:19:19\n---\n","updated":"2017-12-18T08:19:19.899Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjdfll72e0002jsttng29u013","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-12-04T09:38:18.844Z","updated":"2017-12-04T09:38:18.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfll72a0001jsttr2qqlycr","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"_content":"# Test\n\n---\n\n## step 1:\n\nshut up . \n\n### step 2:\n\nhello world\n\n### step 3:\n\nsmile\n\n100000001111 ![picture-loading](F:\\zfh\\code\\bootstrap-master\\bootstrap-master\\image\\picture-loading.gif)","source":"_posts/test.md","raw":"# Test\n\n---\n\n## step 1:\n\nshut up . \n\n### step 2:\n\nhello world\n\n### step 3:\n\nsmile\n\n100000001111 ![picture-loading](F:\\zfh\\code\\bootstrap-master\\bootstrap-master\\image\\picture-loading.gif)","slug":"test","published":1,"date":"2017-12-04T09:45:22.138Z","updated":"2017-12-04T09:57:58.042Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfll72f0003jstth6c4bz89","content":"<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1><hr>\n<h2 id=\"step-1\"><a href=\"#step-1\" class=\"headerlink\" title=\"step 1:\"></a>step 1:</h2><p>shut up . </p>\n<h3 id=\"step-2\"><a href=\"#step-2\" class=\"headerlink\" title=\"step 2:\"></a>step 2:</h3><p>hello world</p>\n<h3 id=\"step-3\"><a href=\"#step-3\" class=\"headerlink\" title=\"step 3:\"></a>step 3:</h3><p>smile</p>\n<p>100000001111 <img src=\"F:\\zfh\\code\\bootstrap-master\\bootstrap-master\\image\\picture-loading.gif\" alt=\"picture-loading\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1><hr>\n<h2 id=\"step-1\"><a href=\"#step-1\" class=\"headerlink\" title=\"step 1:\"></a>step 1:</h2><p>shut up . </p>\n<h3 id=\"step-2\"><a href=\"#step-2\" class=\"headerlink\" title=\"step 2:\"></a>step 2:</h3><p>hello world</p>\n<h3 id=\"step-3\"><a href=\"#step-3\" class=\"headerlink\" title=\"step 3:\"></a>step 3:</h3><p>smile</p>\n<p>100000001111 <img src=\"F:\\zfh\\code\\bootstrap-master\\bootstrap-master\\image\\picture-loading.gif\" alt=\"picture-loading\"></p>\n"},{"_content":"### ExportExcelUtil\n\n---\n\n```\npackage cn.onebank.ucg.utils;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.apache.poi.hssf.usermodel.HSSFCell;\nimport org.apache.poi.hssf.usermodel.HSSFCellStyle;\nimport org.apache.poi.hssf.usermodel.HSSFClientAnchor;\nimport org.apache.poi.hssf.usermodel.HSSFFont;\nimport org.apache.poi.hssf.usermodel.HSSFPatriarch;\nimport org.apache.poi.hssf.usermodel.HSSFRichTextString;\nimport org.apache.poi.hssf.usermodel.HSSFRow;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.hssf.util.HSSFColor;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\n\n@Component\npublic class ExportExcelUtil<T> {\n\t\n   public String[] exportExcelHeader(Class<T> clz){\n\t\tField fields[] = clz.getDeclaredFields(); \n   \t \tString[] name = new String[fields.length]; \n        try{ \n\t        Field.setAccessible(fields,true); \n\t        for (int i = 1; i < fields.length; i++)   { \n                name[i] = fields[i].getName(); \n                System.out.println(name[i] + \"-> \"); \n\t        } \n        } \n        catch(Exception e){ \n            e.printStackTrace(); \n        } \n        return name;\n   }\n   \n   public void exportExcel(Collection<T> dataset, OutputStream out) {\n      exportExcel(\"导出EXCEL文档\", null,null, dataset, out, \"yyyy-MM-dd\");\n   }\n\n   public void exportExcel(String[] headers, Collection<T> dataset,\n           OutputStream out) {\n       exportExcel(\"导出EXCEL文档\", null,headers, dataset, out, \"yyyy-MM-dd\");\n   }\n\n   public void exportExcel(String title, String[] headers,\n           Collection<T> dataset, OutputStream out) {\n       exportExcel(title,null, headers, dataset, out, \"yyyy-MM-dd\");\n   }\n   public void exportExcel(String title,String[] headerTitle, String[] headers,\n           Collection<T> dataset, OutputStream out) {\n       exportExcel(title,headerTitle, headers, dataset, out, \"yyyy-MM-dd\");\n   }\n\n   public void exportExcel(String[] headerTitle,String[] headers, Collection<T> dataset,\n           OutputStream out, String pattern) {\n       exportExcel(\"导出EXCEL文档\",headerTitle, headers, dataset, out, pattern);\n   }\n   /**\n    * 这是一个通用的方法，利用了JAVA的反射机制，可以将放置在JAVA集合中并且符号一定条件的数据以EXCEL 的形式输出到指定IO设备上\n    * \n    * @param title\n    *            表格标题名\n    *  @param headerTitle\n    *  \t\t\t表格属性列名数组（标题）若为null，默认显示headers\n    * @param headers\n    *            表格属性列名数组\n    * @param dataset\n    *            需要显示的数据集合,集合中一定要放置符合javabean风格的类的对象。此方法支持的\n    *            javabean属性的数据类型有基本数据类型及String,Date,byte[](图片数据)\n    * @param out\n    *            与输出设备关联的流对象，可以将EXCEL文档导出到本地文件或者网络中\n    * @param pattern\n    *            如果有时间数据，设定输出格式。默认为\"yyy-MM-dd\"\n    */\n   @SuppressWarnings({ \"unchecked\", \"deprecation\", \"rawtypes\" })\n   public void exportExcel(String title,String[] headerTitle, String[] headers,\n           Collection<T> dataset, OutputStream out, String pattern) {\n       // 声明一个工作薄\n       HSSFWorkbook workbook = new HSSFWorkbook();\n       // 生成一个样式\n       HSSFCellStyle style = workbook.createCellStyle();\n       // 设置这些样式\n       style.setFillForegroundColor(HSSFColor.WHITE.index);\n       style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);\n       style.setBorderBottom(HSSFCellStyle.BORDER_THIN);\n       style.setBorderLeft(HSSFCellStyle.BORDER_THIN);\n       style.setBorderRight(HSSFCellStyle.BORDER_THIN);\n       style.setBorderTop(HSSFCellStyle.BORDER_THIN);\n       style.setAlignment(HSSFCellStyle.ALIGN_CENTER);\n       // 生成一个字体\n       HSSFFont font = workbook.createFont();\n       font.setColor(HSSFColor.BLACK.index);\n       font.setFontHeightInPoints((short) 12);\n       font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);\n       // 把字体应用到当前的样式\n       style.setFont(font);\n       // 生成并设置另一个样式\n       HSSFCellStyle style2 = workbook.createCellStyle();\n       style2.setFillForegroundColor(HSSFColor.WHITE.index);\n       style2.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);\n       style2.setBorderBottom(HSSFCellStyle.BORDER_THIN);\n       style2.setBorderLeft(HSSFCellStyle.BORDER_THIN);\n       style2.setBorderRight(HSSFCellStyle.BORDER_THIN);\n       style2.setBorderTop(HSSFCellStyle.BORDER_THIN);\n       style2.setAlignment(HSSFCellStyle.ALIGN_CENTER);\n       style2.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);\n       // 生成另一个字体\n       HSSFFont font2 = workbook.createFont();\n       font2.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL);\n       // 把字体应用到当前的样式\n       style2.setFont(font2);\n\n       int sheetCount = 1000;\n       if (dataset.size() > sheetCount) {\n           Iterator<T> it = dataset.iterator();\n           for (int i = 0; i <= 4; i++) {\n               int index = 0;\n               List<T> list = new ArrayList<T>();\n               while (it.hasNext()) {\n                   index++;\n                   if (index < sheetCount) {\n                       list.add(it.next());\n                   } else {\n                       break;\n                   }\n               }\n               try {\n\t\t\t\t\tgenerateSheet(list, style, style2, workbook, pattern,headerTitle, headers,\n\t\t\t\t\t        title + \"_\" + (i + 1));\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n           }\n       } else {\n           try {\n\t\t\t\tgenerateSheet(dataset, style, style2, workbook, pattern,headerTitle, headers,\n\t\t\t\t        title);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n       }\n\n       try {\n           workbook.write(out);\n       } catch (IOException e) {\n           e.printStackTrace();\n       }finally{\n       \ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n       }\n\n   }\n\n   public void generateSheet(Collection<T> dataset, HSSFCellStyle style,\n           HSSFCellStyle style2, HSSFWorkbook workbook, String pattern,\n           String[] headerTitle,String[] headers, String title) throws Exception {\n       // 生成一个表格\n       HSSFSheet sheet = workbook.createSheet(title);\n       // 设置表格默认列宽度为15个字节\n       sheet.setDefaultColumnWidth((short) 15);\n       // 声明一个画图的顶级管理器\n       HSSFPatriarch patriarch = sheet.createDrawingPatriarch();\n       // 定义注释的大小和位置,详见文档\n      /* HSSFComment comment = patriarch.createComment(new HSSFClientAnchor(0,\n               0, 0, 0, (short) 4, 2, (short) 6, 5));\n       // 设置注释内容\n       comment.setString(new HSSFRichTextString(\"可以在POI中添加注释！\"));\n       // 设置注释作者，当鼠标移动到单元格上是可以在状态栏中看到该内容.\n       comment.setAuthor(\"author\");*/\n       // 产生表格标题行\n       HSSFRow row = sheet.createRow(0);\n       String[] showTitle = headers;\n       if(!StringUtils.isEmpty(headerTitle)) showTitle = headerTitle;\n       int indexTitle = 0;//excel列下标\n       for (short i = 0; i < showTitle.length; i++) {\n       \tif(StringUtils.isEmpty(showTitle[i])) continue;\n           HSSFCell cell = row.createCell(indexTitle);\n           cell.setCellStyle(style);\n           HSSFRichTextString text = new HSSFRichTextString(showTitle[i]);\n           cell.setCellValue(text);\n           indexTitle++;\n       }\n       if(StringUtils.isEmpty(dataset)) return;\n       // 遍历集合数据，产生数据行\n       Iterator<T> it = dataset.iterator();\n       int index = 0;\n       while (it.hasNext()) {\n           index++;\n           row = sheet.createRow(index);\n           T t = (T) it.next();\n           Class tCls = t.getClass();\n           Method[] methods=t.getClass().getMethods();\n           // 利用反射，根据javabean属性的先后顺序，动态调用getXxx()方法得到属性值\n           Field[] fields=new Field[headers.length];\n          \n           for (short j = 0; j < headers.length; j++) {\n           \tif(StringUtils.isEmpty(headers[j]))  continue;\n           \tField field1  = tCls.getDeclaredField(headers[j]);\n\t\t\t\tfields[j]=field1;\n           }\n           int indexText = 0;//excel列下标\n           for (short i = 0; i < fields.length; i++) {\n           \tif(StringUtils.isEmpty(fields[i])) continue;\n           \t\n               Field field = fields[i];\n               HSSFCell cell = row.createCell(indexText);\n              \n               cell.setCellStyle(style2);\n               \n               String fieldName = field.getName();\n               PropertyDescriptor pd=new PropertyDescriptor(fieldName,tCls);\n               Method getMethod=pd.getReadMethod();\n               Object value = getMethod.invoke(t, new Object[] {});\n               // 判断值的类型后进行强制类型转换\n               String textValue = null;\n               if (value instanceof Boolean) {\n                   boolean bValue = (Boolean) value;\n                   textValue = \"是\";\n                   if (!bValue) textValue = \"否\";\n               } else if (value instanceof Date) {\n                   Date date = (Date) value;\n                   SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n                   textValue = sdf.format(date);\n               } else if (value instanceof byte[]) {\n                   // 有图片时，设置行高为60px;\n                   row.setHeightInPoints(60);\n                   // 设置图片所在列宽度为80px,注意这里单位的一个换算\n                   sheet.setColumnWidth(indexText, (short) (35.7 * 80));\n                   // sheet.autoSizeColumn(i);\n                   byte[] bsValue = (byte[]) value;\n                   HSSFClientAnchor anchor = new HSSFClientAnchor(0, 0,\n                           1023, 255, (short) 6, index, (short) 6, index);\n                   anchor.setAnchorType(2);\n                   patriarch.createPicture(anchor, workbook.addPicture(\n                           bsValue, HSSFWorkbook.PICTURE_TYPE_JPEG));\n               }  else {\n                   // 其它数据类型都当作字符串简单处理\n                   if (value == null)   value = \"\";\n                   \n                   textValue = value.toString();\n               }\n               // 如果不是图片数据，就利用正则表达式判断textValue是否全部由数字组成\n               if (textValue != null) {\n                   Pattern p = Pattern.compile(\"^//d+(//.//d+) {1}quot;\");\n                   Matcher matcher = p.matcher(textValue);\n                   if (matcher.matches()) {\n                       // 是数字当作double处理\n                       cell.setCellValue(Double.parseDouble(textValue));\n                   } else {\n                       HSSFRichTextString richString = new HSSFRichTextString(\n                               textValue);\n                       HSSFFont font3 = workbook.createFont();\n                       font3.setColor(HSSFColor.BLACK.index);\n                       richString.applyFont(font3);\n                       cell.setCellValue(richString);\n                   }\n               }\n               indexText++;\n           }\n       }\n   }\n\n\n//    public static void main(String[] args) throws Exception {\n//   \t ExportExcelUtil<Dept> ex = new ExportExcelUtil<Dept>();\n////   \t String[] headers = ex.exportExcelHeader(MenuVo.class);\n//        List<Dept> list = new ArrayList<Dept>();//(List<MenuVo>) hashMap.get(\"list\");\n//        Dept dept = new Dept();\n//        dept.setId(1);\n//        dept.setNum(1);\n//        dept.setPid(0);\n//        dept.setPids(\"pids\");\n//        dept.setSimplename(\"jiancheng\");\n//        dept.setFullname(\"quancheng\");\n//        dept.setTips(\"tishi\");\n//        dept.setVersion(1);\n//        list.add(dept);\n//        String[] headerTitle = {\"主键id\",\"排序\",\"父部门id\",\"父级ids\",\"简称\",\"版本\"};\n//        String[] headers = {\"id\",\"num\",\"pid\",\"pids\",\"simplename\",\"version\"};\n//        OutputStream out = new FileOutputStream(\"F://测试导出Dept列表.xls\");\n//        ex.exportExcel(\"Dept列表\",headerTitle,headers, list, out);\n//        out.close();\n//        JOptionPane.showMessageDialog(null, \"导出成功!\");\n//        System.out.println(\"excel导出成功！\");\n//    }\n}\n```\n\n- just for test\n\n  啊啊 啊  考虑了\n\n  你是谁>....;;;;;rr方法。。。。。","source":"_posts/ExportExcelUtil.md","raw":"### ExportExcelUtil\n\n---\n\n```\npackage cn.onebank.ucg.utils;\n\nimport java.beans.PropertyDescriptor;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.apache.poi.hssf.usermodel.HSSFCell;\nimport org.apache.poi.hssf.usermodel.HSSFCellStyle;\nimport org.apache.poi.hssf.usermodel.HSSFClientAnchor;\nimport org.apache.poi.hssf.usermodel.HSSFFont;\nimport org.apache.poi.hssf.usermodel.HSSFPatriarch;\nimport org.apache.poi.hssf.usermodel.HSSFRichTextString;\nimport org.apache.poi.hssf.usermodel.HSSFRow;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.apache.poi.hssf.util.HSSFColor;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\n\n@Component\npublic class ExportExcelUtil<T> {\n\t\n   public String[] exportExcelHeader(Class<T> clz){\n\t\tField fields[] = clz.getDeclaredFields(); \n   \t \tString[] name = new String[fields.length]; \n        try{ \n\t        Field.setAccessible(fields,true); \n\t        for (int i = 1; i < fields.length; i++)   { \n                name[i] = fields[i].getName(); \n                System.out.println(name[i] + \"-> \"); \n\t        } \n        } \n        catch(Exception e){ \n            e.printStackTrace(); \n        } \n        return name;\n   }\n   \n   public void exportExcel(Collection<T> dataset, OutputStream out) {\n      exportExcel(\"导出EXCEL文档\", null,null, dataset, out, \"yyyy-MM-dd\");\n   }\n\n   public void exportExcel(String[] headers, Collection<T> dataset,\n           OutputStream out) {\n       exportExcel(\"导出EXCEL文档\", null,headers, dataset, out, \"yyyy-MM-dd\");\n   }\n\n   public void exportExcel(String title, String[] headers,\n           Collection<T> dataset, OutputStream out) {\n       exportExcel(title,null, headers, dataset, out, \"yyyy-MM-dd\");\n   }\n   public void exportExcel(String title,String[] headerTitle, String[] headers,\n           Collection<T> dataset, OutputStream out) {\n       exportExcel(title,headerTitle, headers, dataset, out, \"yyyy-MM-dd\");\n   }\n\n   public void exportExcel(String[] headerTitle,String[] headers, Collection<T> dataset,\n           OutputStream out, String pattern) {\n       exportExcel(\"导出EXCEL文档\",headerTitle, headers, dataset, out, pattern);\n   }\n   /**\n    * 这是一个通用的方法，利用了JAVA的反射机制，可以将放置在JAVA集合中并且符号一定条件的数据以EXCEL 的形式输出到指定IO设备上\n    * \n    * @param title\n    *            表格标题名\n    *  @param headerTitle\n    *  \t\t\t表格属性列名数组（标题）若为null，默认显示headers\n    * @param headers\n    *            表格属性列名数组\n    * @param dataset\n    *            需要显示的数据集合,集合中一定要放置符合javabean风格的类的对象。此方法支持的\n    *            javabean属性的数据类型有基本数据类型及String,Date,byte[](图片数据)\n    * @param out\n    *            与输出设备关联的流对象，可以将EXCEL文档导出到本地文件或者网络中\n    * @param pattern\n    *            如果有时间数据，设定输出格式。默认为\"yyy-MM-dd\"\n    */\n   @SuppressWarnings({ \"unchecked\", \"deprecation\", \"rawtypes\" })\n   public void exportExcel(String title,String[] headerTitle, String[] headers,\n           Collection<T> dataset, OutputStream out, String pattern) {\n       // 声明一个工作薄\n       HSSFWorkbook workbook = new HSSFWorkbook();\n       // 生成一个样式\n       HSSFCellStyle style = workbook.createCellStyle();\n       // 设置这些样式\n       style.setFillForegroundColor(HSSFColor.WHITE.index);\n       style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);\n       style.setBorderBottom(HSSFCellStyle.BORDER_THIN);\n       style.setBorderLeft(HSSFCellStyle.BORDER_THIN);\n       style.setBorderRight(HSSFCellStyle.BORDER_THIN);\n       style.setBorderTop(HSSFCellStyle.BORDER_THIN);\n       style.setAlignment(HSSFCellStyle.ALIGN_CENTER);\n       // 生成一个字体\n       HSSFFont font = workbook.createFont();\n       font.setColor(HSSFColor.BLACK.index);\n       font.setFontHeightInPoints((short) 12);\n       font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);\n       // 把字体应用到当前的样式\n       style.setFont(font);\n       // 生成并设置另一个样式\n       HSSFCellStyle style2 = workbook.createCellStyle();\n       style2.setFillForegroundColor(HSSFColor.WHITE.index);\n       style2.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);\n       style2.setBorderBottom(HSSFCellStyle.BORDER_THIN);\n       style2.setBorderLeft(HSSFCellStyle.BORDER_THIN);\n       style2.setBorderRight(HSSFCellStyle.BORDER_THIN);\n       style2.setBorderTop(HSSFCellStyle.BORDER_THIN);\n       style2.setAlignment(HSSFCellStyle.ALIGN_CENTER);\n       style2.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);\n       // 生成另一个字体\n       HSSFFont font2 = workbook.createFont();\n       font2.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL);\n       // 把字体应用到当前的样式\n       style2.setFont(font2);\n\n       int sheetCount = 1000;\n       if (dataset.size() > sheetCount) {\n           Iterator<T> it = dataset.iterator();\n           for (int i = 0; i <= 4; i++) {\n               int index = 0;\n               List<T> list = new ArrayList<T>();\n               while (it.hasNext()) {\n                   index++;\n                   if (index < sheetCount) {\n                       list.add(it.next());\n                   } else {\n                       break;\n                   }\n               }\n               try {\n\t\t\t\t\tgenerateSheet(list, style, style2, workbook, pattern,headerTitle, headers,\n\t\t\t\t\t        title + \"_\" + (i + 1));\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n           }\n       } else {\n           try {\n\t\t\t\tgenerateSheet(dataset, style, style2, workbook, pattern,headerTitle, headers,\n\t\t\t\t        title);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n       }\n\n       try {\n           workbook.write(out);\n       } catch (IOException e) {\n           e.printStackTrace();\n       }finally{\n       \ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n       }\n\n   }\n\n   public void generateSheet(Collection<T> dataset, HSSFCellStyle style,\n           HSSFCellStyle style2, HSSFWorkbook workbook, String pattern,\n           String[] headerTitle,String[] headers, String title) throws Exception {\n       // 生成一个表格\n       HSSFSheet sheet = workbook.createSheet(title);\n       // 设置表格默认列宽度为15个字节\n       sheet.setDefaultColumnWidth((short) 15);\n       // 声明一个画图的顶级管理器\n       HSSFPatriarch patriarch = sheet.createDrawingPatriarch();\n       // 定义注释的大小和位置,详见文档\n      /* HSSFComment comment = patriarch.createComment(new HSSFClientAnchor(0,\n               0, 0, 0, (short) 4, 2, (short) 6, 5));\n       // 设置注释内容\n       comment.setString(new HSSFRichTextString(\"可以在POI中添加注释！\"));\n       // 设置注释作者，当鼠标移动到单元格上是可以在状态栏中看到该内容.\n       comment.setAuthor(\"author\");*/\n       // 产生表格标题行\n       HSSFRow row = sheet.createRow(0);\n       String[] showTitle = headers;\n       if(!StringUtils.isEmpty(headerTitle)) showTitle = headerTitle;\n       int indexTitle = 0;//excel列下标\n       for (short i = 0; i < showTitle.length; i++) {\n       \tif(StringUtils.isEmpty(showTitle[i])) continue;\n           HSSFCell cell = row.createCell(indexTitle);\n           cell.setCellStyle(style);\n           HSSFRichTextString text = new HSSFRichTextString(showTitle[i]);\n           cell.setCellValue(text);\n           indexTitle++;\n       }\n       if(StringUtils.isEmpty(dataset)) return;\n       // 遍历集合数据，产生数据行\n       Iterator<T> it = dataset.iterator();\n       int index = 0;\n       while (it.hasNext()) {\n           index++;\n           row = sheet.createRow(index);\n           T t = (T) it.next();\n           Class tCls = t.getClass();\n           Method[] methods=t.getClass().getMethods();\n           // 利用反射，根据javabean属性的先后顺序，动态调用getXxx()方法得到属性值\n           Field[] fields=new Field[headers.length];\n          \n           for (short j = 0; j < headers.length; j++) {\n           \tif(StringUtils.isEmpty(headers[j]))  continue;\n           \tField field1  = tCls.getDeclaredField(headers[j]);\n\t\t\t\tfields[j]=field1;\n           }\n           int indexText = 0;//excel列下标\n           for (short i = 0; i < fields.length; i++) {\n           \tif(StringUtils.isEmpty(fields[i])) continue;\n           \t\n               Field field = fields[i];\n               HSSFCell cell = row.createCell(indexText);\n              \n               cell.setCellStyle(style2);\n               \n               String fieldName = field.getName();\n               PropertyDescriptor pd=new PropertyDescriptor(fieldName,tCls);\n               Method getMethod=pd.getReadMethod();\n               Object value = getMethod.invoke(t, new Object[] {});\n               // 判断值的类型后进行强制类型转换\n               String textValue = null;\n               if (value instanceof Boolean) {\n                   boolean bValue = (Boolean) value;\n                   textValue = \"是\";\n                   if (!bValue) textValue = \"否\";\n               } else if (value instanceof Date) {\n                   Date date = (Date) value;\n                   SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n                   textValue = sdf.format(date);\n               } else if (value instanceof byte[]) {\n                   // 有图片时，设置行高为60px;\n                   row.setHeightInPoints(60);\n                   // 设置图片所在列宽度为80px,注意这里单位的一个换算\n                   sheet.setColumnWidth(indexText, (short) (35.7 * 80));\n                   // sheet.autoSizeColumn(i);\n                   byte[] bsValue = (byte[]) value;\n                   HSSFClientAnchor anchor = new HSSFClientAnchor(0, 0,\n                           1023, 255, (short) 6, index, (short) 6, index);\n                   anchor.setAnchorType(2);\n                   patriarch.createPicture(anchor, workbook.addPicture(\n                           bsValue, HSSFWorkbook.PICTURE_TYPE_JPEG));\n               }  else {\n                   // 其它数据类型都当作字符串简单处理\n                   if (value == null)   value = \"\";\n                   \n                   textValue = value.toString();\n               }\n               // 如果不是图片数据，就利用正则表达式判断textValue是否全部由数字组成\n               if (textValue != null) {\n                   Pattern p = Pattern.compile(\"^//d+(//.//d+) {1}quot;\");\n                   Matcher matcher = p.matcher(textValue);\n                   if (matcher.matches()) {\n                       // 是数字当作double处理\n                       cell.setCellValue(Double.parseDouble(textValue));\n                   } else {\n                       HSSFRichTextString richString = new HSSFRichTextString(\n                               textValue);\n                       HSSFFont font3 = workbook.createFont();\n                       font3.setColor(HSSFColor.BLACK.index);\n                       richString.applyFont(font3);\n                       cell.setCellValue(richString);\n                   }\n               }\n               indexText++;\n           }\n       }\n   }\n\n\n//    public static void main(String[] args) throws Exception {\n//   \t ExportExcelUtil<Dept> ex = new ExportExcelUtil<Dept>();\n////   \t String[] headers = ex.exportExcelHeader(MenuVo.class);\n//        List<Dept> list = new ArrayList<Dept>();//(List<MenuVo>) hashMap.get(\"list\");\n//        Dept dept = new Dept();\n//        dept.setId(1);\n//        dept.setNum(1);\n//        dept.setPid(0);\n//        dept.setPids(\"pids\");\n//        dept.setSimplename(\"jiancheng\");\n//        dept.setFullname(\"quancheng\");\n//        dept.setTips(\"tishi\");\n//        dept.setVersion(1);\n//        list.add(dept);\n//        String[] headerTitle = {\"主键id\",\"排序\",\"父部门id\",\"父级ids\",\"简称\",\"版本\"};\n//        String[] headers = {\"id\",\"num\",\"pid\",\"pids\",\"simplename\",\"version\"};\n//        OutputStream out = new FileOutputStream(\"F://测试导出Dept列表.xls\");\n//        ex.exportExcel(\"Dept列表\",headerTitle,headers, list, out);\n//        out.close();\n//        JOptionPane.showMessageDialog(null, \"导出成功!\");\n//        System.out.println(\"excel导出成功！\");\n//    }\n}\n```\n\n- just for test\n\n  啊啊 啊  考虑了\n\n  你是谁>....;;;;;rr方法。。。。。","slug":"ExportExcelUtil","published":1,"date":"2017-12-06T02:59:40.812Z","updated":"2017-12-18T06:40:03.137Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdfll72i0004jsttcablp4lo","content":"<h3 id=\"ExportExcelUtil\"><a href=\"#ExportExcelUtil\" class=\"headerlink\" title=\"ExportExcelUtil\"></a>ExportExcelUtil</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.onebank.ucg.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.beans.PropertyDescriptor;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import java.text.SimpleDateFormat;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Collection;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.regex.Matcher;</span><br><span class=\"line\">import java.util.regex.Pattern;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFCell;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFCellStyle;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFClientAnchor;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFFont;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFPatriarch;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFRichTextString;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFRow;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFSheet;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class=\"line\">import org.apache.poi.hssf.util.HSSFColor;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class ExportExcelUtil&lt;T&gt; &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">   public String[] exportExcelHeader(Class&lt;T&gt; clz)&#123;</span><br><span class=\"line\">\t\tField fields[] = clz.getDeclaredFields(); </span><br><span class=\"line\">   \t \tString[] name = new String[fields.length]; </span><br><span class=\"line\">        try&#123; </span><br><span class=\"line\">\t        Field.setAccessible(fields,true); </span><br><span class=\"line\">\t        for (int i = 1; i &lt; fields.length; i++)   &#123; </span><br><span class=\"line\">                name[i] = fields[i].getName(); </span><br><span class=\"line\">                System.out.println(name[i] + &quot;-&gt; &quot;); </span><br><span class=\"line\">\t        &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        catch(Exception e)&#123; </span><br><span class=\"line\">            e.printStackTrace(); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        return name;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   public void exportExcel(Collection&lt;T&gt; dataset, OutputStream out) &#123;</span><br><span class=\"line\">      exportExcel(&quot;导出EXCEL文档&quot;, null,null, dataset, out, &quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void exportExcel(String[] headers, Collection&lt;T&gt; dataset,</span><br><span class=\"line\">           OutputStream out) &#123;</span><br><span class=\"line\">       exportExcel(&quot;导出EXCEL文档&quot;, null,headers, dataset, out, &quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void exportExcel(String title, String[] headers,</span><br><span class=\"line\">           Collection&lt;T&gt; dataset, OutputStream out) &#123;</span><br><span class=\"line\">       exportExcel(title,null, headers, dataset, out, &quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   public void exportExcel(String title,String[] headerTitle, String[] headers,</span><br><span class=\"line\">           Collection&lt;T&gt; dataset, OutputStream out) &#123;</span><br><span class=\"line\">       exportExcel(title,headerTitle, headers, dataset, out, &quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void exportExcel(String[] headerTitle,String[] headers, Collection&lt;T&gt; dataset,</span><br><span class=\"line\">           OutputStream out, String pattern) &#123;</span><br><span class=\"line\">       exportExcel(&quot;导出EXCEL文档&quot;,headerTitle, headers, dataset, out, pattern);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   /**</span><br><span class=\"line\">    * 这是一个通用的方法，利用了JAVA的反射机制，可以将放置在JAVA集合中并且符号一定条件的数据以EXCEL 的形式输出到指定IO设备上</span><br><span class=\"line\">    * </span><br><span class=\"line\">    * @param title</span><br><span class=\"line\">    *            表格标题名</span><br><span class=\"line\">    *  @param headerTitle</span><br><span class=\"line\">    *  \t\t\t表格属性列名数组（标题）若为null，默认显示headers</span><br><span class=\"line\">    * @param headers</span><br><span class=\"line\">    *            表格属性列名数组</span><br><span class=\"line\">    * @param dataset</span><br><span class=\"line\">    *            需要显示的数据集合,集合中一定要放置符合javabean风格的类的对象。此方法支持的</span><br><span class=\"line\">    *            javabean属性的数据类型有基本数据类型及String,Date,byte[](图片数据)</span><br><span class=\"line\">    * @param out</span><br><span class=\"line\">    *            与输出设备关联的流对象，可以将EXCEL文档导出到本地文件或者网络中</span><br><span class=\"line\">    * @param pattern</span><br><span class=\"line\">    *            如果有时间数据，设定输出格式。默认为&quot;yyy-MM-dd&quot;</span><br><span class=\"line\">    */</span><br><span class=\"line\">   @SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;deprecation&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class=\"line\">   public void exportExcel(String title,String[] headerTitle, String[] headers,</span><br><span class=\"line\">           Collection&lt;T&gt; dataset, OutputStream out, String pattern) &#123;</span><br><span class=\"line\">       // 声明一个工作薄</span><br><span class=\"line\">       HSSFWorkbook workbook = new HSSFWorkbook();</span><br><span class=\"line\">       // 生成一个样式</span><br><span class=\"line\">       HSSFCellStyle style = workbook.createCellStyle();</span><br><span class=\"line\">       // 设置这些样式</span><br><span class=\"line\">       style.setFillForegroundColor(HSSFColor.WHITE.index);</span><br><span class=\"line\">       style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);</span><br><span class=\"line\">       style.setBorderBottom(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style.setBorderLeft(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style.setBorderRight(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style.setBorderTop(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span><br><span class=\"line\">       // 生成一个字体</span><br><span class=\"line\">       HSSFFont font = workbook.createFont();</span><br><span class=\"line\">       font.setColor(HSSFColor.BLACK.index);</span><br><span class=\"line\">       font.setFontHeightInPoints((short) 12);</span><br><span class=\"line\">       font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);</span><br><span class=\"line\">       // 把字体应用到当前的样式</span><br><span class=\"line\">       style.setFont(font);</span><br><span class=\"line\">       // 生成并设置另一个样式</span><br><span class=\"line\">       HSSFCellStyle style2 = workbook.createCellStyle();</span><br><span class=\"line\">       style2.setFillForegroundColor(HSSFColor.WHITE.index);</span><br><span class=\"line\">       style2.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);</span><br><span class=\"line\">       style2.setBorderBottom(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style2.setBorderLeft(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style2.setBorderRight(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style2.setBorderTop(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style2.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span><br><span class=\"line\">       style2.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);</span><br><span class=\"line\">       // 生成另一个字体</span><br><span class=\"line\">       HSSFFont font2 = workbook.createFont();</span><br><span class=\"line\">       font2.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL);</span><br><span class=\"line\">       // 把字体应用到当前的样式</span><br><span class=\"line\">       style2.setFont(font2);</span><br><span class=\"line\"></span><br><span class=\"line\">       int sheetCount = 1000;</span><br><span class=\"line\">       if (dataset.size() &gt; sheetCount) &#123;</span><br><span class=\"line\">           Iterator&lt;T&gt; it = dataset.iterator();</span><br><span class=\"line\">           for (int i = 0; i &lt;= 4; i++) &#123;</span><br><span class=\"line\">               int index = 0;</span><br><span class=\"line\">               List&lt;T&gt; list = new ArrayList&lt;T&gt;();</span><br><span class=\"line\">               while (it.hasNext()) &#123;</span><br><span class=\"line\">                   index++;</span><br><span class=\"line\">                   if (index &lt; sheetCount) &#123;</span><br><span class=\"line\">                       list.add(it.next());</span><br><span class=\"line\">                   &#125; else &#123;</span><br><span class=\"line\">                       break;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">\t\t\t\t\tgenerateSheet(list, style, style2, workbook, pattern,headerTitle, headers,</span><br><span class=\"line\">\t\t\t\t\t        title + &quot;_&quot; + (i + 1));</span><br><span class=\"line\">\t\t\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           try &#123;</span><br><span class=\"line\">\t\t\t\tgenerateSheet(dataset, style, style2, workbook, pattern,headerTitle, headers,</span><br><span class=\"line\">\t\t\t\t        title);</span><br><span class=\"line\">\t\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           workbook.write(out);</span><br><span class=\"line\">       &#125; catch (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125;finally&#123;</span><br><span class=\"line\">       \ttry &#123;</span><br><span class=\"line\">\t\t\t\tout.close();</span><br><span class=\"line\">\t\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void generateSheet(Collection&lt;T&gt; dataset, HSSFCellStyle style,</span><br><span class=\"line\">           HSSFCellStyle style2, HSSFWorkbook workbook, String pattern,</span><br><span class=\"line\">           String[] headerTitle,String[] headers, String title) throws Exception &#123;</span><br><span class=\"line\">       // 生成一个表格</span><br><span class=\"line\">       HSSFSheet sheet = workbook.createSheet(title);</span><br><span class=\"line\">       // 设置表格默认列宽度为15个字节</span><br><span class=\"line\">       sheet.setDefaultColumnWidth((short) 15);</span><br><span class=\"line\">       // 声明一个画图的顶级管理器</span><br><span class=\"line\">       HSSFPatriarch patriarch = sheet.createDrawingPatriarch();</span><br><span class=\"line\">       // 定义注释的大小和位置,详见文档</span><br><span class=\"line\">      /* HSSFComment comment = patriarch.createComment(new HSSFClientAnchor(0,</span><br><span class=\"line\">               0, 0, 0, (short) 4, 2, (short) 6, 5));</span><br><span class=\"line\">       // 设置注释内容</span><br><span class=\"line\">       comment.setString(new HSSFRichTextString(&quot;可以在POI中添加注释！&quot;));</span><br><span class=\"line\">       // 设置注释作者，当鼠标移动到单元格上是可以在状态栏中看到该内容.</span><br><span class=\"line\">       comment.setAuthor(&quot;author&quot;);*/</span><br><span class=\"line\">       // 产生表格标题行</span><br><span class=\"line\">       HSSFRow row = sheet.createRow(0);</span><br><span class=\"line\">       String[] showTitle = headers;</span><br><span class=\"line\">       if(!StringUtils.isEmpty(headerTitle)) showTitle = headerTitle;</span><br><span class=\"line\">       int indexTitle = 0;//excel列下标</span><br><span class=\"line\">       for (short i = 0; i &lt; showTitle.length; i++) &#123;</span><br><span class=\"line\">       \tif(StringUtils.isEmpty(showTitle[i])) continue;</span><br><span class=\"line\">           HSSFCell cell = row.createCell(indexTitle);</span><br><span class=\"line\">           cell.setCellStyle(style);</span><br><span class=\"line\">           HSSFRichTextString text = new HSSFRichTextString(showTitle[i]);</span><br><span class=\"line\">           cell.setCellValue(text);</span><br><span class=\"line\">           indexTitle++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       if(StringUtils.isEmpty(dataset)) return;</span><br><span class=\"line\">       // 遍历集合数据，产生数据行</span><br><span class=\"line\">       Iterator&lt;T&gt; it = dataset.iterator();</span><br><span class=\"line\">       int index = 0;</span><br><span class=\"line\">       while (it.hasNext()) &#123;</span><br><span class=\"line\">           index++;</span><br><span class=\"line\">           row = sheet.createRow(index);</span><br><span class=\"line\">           T t = (T) it.next();</span><br><span class=\"line\">           Class tCls = t.getClass();</span><br><span class=\"line\">           Method[] methods=t.getClass().getMethods();</span><br><span class=\"line\">           // 利用反射，根据javabean属性的先后顺序，动态调用getXxx()方法得到属性值</span><br><span class=\"line\">           Field[] fields=new Field[headers.length];</span><br><span class=\"line\">          </span><br><span class=\"line\">           for (short j = 0; j &lt; headers.length; j++) &#123;</span><br><span class=\"line\">           \tif(StringUtils.isEmpty(headers[j]))  continue;</span><br><span class=\"line\">           \tField field1  = tCls.getDeclaredField(headers[j]);</span><br><span class=\"line\">\t\t\t\tfields[j]=field1;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           int indexText = 0;//excel列下标</span><br><span class=\"line\">           for (short i = 0; i &lt; fields.length; i++) &#123;</span><br><span class=\"line\">           \tif(StringUtils.isEmpty(fields[i])) continue;</span><br><span class=\"line\">           \t</span><br><span class=\"line\">               Field field = fields[i];</span><br><span class=\"line\">               HSSFCell cell = row.createCell(indexText);</span><br><span class=\"line\">              </span><br><span class=\"line\">               cell.setCellStyle(style2);</span><br><span class=\"line\">               </span><br><span class=\"line\">               String fieldName = field.getName();</span><br><span class=\"line\">               PropertyDescriptor pd=new PropertyDescriptor(fieldName,tCls);</span><br><span class=\"line\">               Method getMethod=pd.getReadMethod();</span><br><span class=\"line\">               Object value = getMethod.invoke(t, new Object[] &#123;&#125;);</span><br><span class=\"line\">               // 判断值的类型后进行强制类型转换</span><br><span class=\"line\">               String textValue = null;</span><br><span class=\"line\">               if (value instanceof Boolean) &#123;</span><br><span class=\"line\">                   boolean bValue = (Boolean) value;</span><br><span class=\"line\">                   textValue = &quot;是&quot;;</span><br><span class=\"line\">                   if (!bValue) textValue = &quot;否&quot;;</span><br><span class=\"line\">               &#125; else if (value instanceof Date) &#123;</span><br><span class=\"line\">                   Date date = (Date) value;</span><br><span class=\"line\">                   SimpleDateFormat sdf = new SimpleDateFormat(pattern);</span><br><span class=\"line\">                   textValue = sdf.format(date);</span><br><span class=\"line\">               &#125; else if (value instanceof byte[]) &#123;</span><br><span class=\"line\">                   // 有图片时，设置行高为60px;</span><br><span class=\"line\">                   row.setHeightInPoints(60);</span><br><span class=\"line\">                   // 设置图片所在列宽度为80px,注意这里单位的一个换算</span><br><span class=\"line\">                   sheet.setColumnWidth(indexText, (short) (35.7 * 80));</span><br><span class=\"line\">                   // sheet.autoSizeColumn(i);</span><br><span class=\"line\">                   byte[] bsValue = (byte[]) value;</span><br><span class=\"line\">                   HSSFClientAnchor anchor = new HSSFClientAnchor(0, 0,</span><br><span class=\"line\">                           1023, 255, (short) 6, index, (short) 6, index);</span><br><span class=\"line\">                   anchor.setAnchorType(2);</span><br><span class=\"line\">                   patriarch.createPicture(anchor, workbook.addPicture(</span><br><span class=\"line\">                           bsValue, HSSFWorkbook.PICTURE_TYPE_JPEG));</span><br><span class=\"line\">               &#125;  else &#123;</span><br><span class=\"line\">                   // 其它数据类型都当作字符串简单处理</span><br><span class=\"line\">                   if (value == null)   value = &quot;&quot;;</span><br><span class=\"line\">                   </span><br><span class=\"line\">                   textValue = value.toString();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               // 如果不是图片数据，就利用正则表达式判断textValue是否全部由数字组成</span><br><span class=\"line\">               if (textValue != null) &#123;</span><br><span class=\"line\">                   Pattern p = Pattern.compile(&quot;^//d+(//.//d+) &#123;1&#125;quot;&quot;);</span><br><span class=\"line\">                   Matcher matcher = p.matcher(textValue);</span><br><span class=\"line\">                   if (matcher.matches()) &#123;</span><br><span class=\"line\">                       // 是数字当作double处理</span><br><span class=\"line\">                       cell.setCellValue(Double.parseDouble(textValue));</span><br><span class=\"line\">                   &#125; else &#123;</span><br><span class=\"line\">                       HSSFRichTextString richString = new HSSFRichTextString(</span><br><span class=\"line\">                               textValue);</span><br><span class=\"line\">                       HSSFFont font3 = workbook.createFont();</span><br><span class=\"line\">                       font3.setColor(HSSFColor.BLACK.index);</span><br><span class=\"line\">                       richString.applyFont(font3);</span><br><span class=\"line\">                       cell.setCellValue(richString);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               indexText++;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">//   \t ExportExcelUtil&lt;Dept&gt; ex = new ExportExcelUtil&lt;Dept&gt;();</span><br><span class=\"line\">////   \t String[] headers = ex.exportExcelHeader(MenuVo.class);</span><br><span class=\"line\">//        List&lt;Dept&gt; list = new ArrayList&lt;Dept&gt;();//(List&lt;MenuVo&gt;) hashMap.get(&quot;list&quot;);</span><br><span class=\"line\">//        Dept dept = new Dept();</span><br><span class=\"line\">//        dept.setId(1);</span><br><span class=\"line\">//        dept.setNum(1);</span><br><span class=\"line\">//        dept.setPid(0);</span><br><span class=\"line\">//        dept.setPids(&quot;pids&quot;);</span><br><span class=\"line\">//        dept.setSimplename(&quot;jiancheng&quot;);</span><br><span class=\"line\">//        dept.setFullname(&quot;quancheng&quot;);</span><br><span class=\"line\">//        dept.setTips(&quot;tishi&quot;);</span><br><span class=\"line\">//        dept.setVersion(1);</span><br><span class=\"line\">//        list.add(dept);</span><br><span class=\"line\">//        String[] headerTitle = &#123;&quot;主键id&quot;,&quot;排序&quot;,&quot;父部门id&quot;,&quot;父级ids&quot;,&quot;简称&quot;,&quot;版本&quot;&#125;;</span><br><span class=\"line\">//        String[] headers = &#123;&quot;id&quot;,&quot;num&quot;,&quot;pid&quot;,&quot;pids&quot;,&quot;simplename&quot;,&quot;version&quot;&#125;;</span><br><span class=\"line\">//        OutputStream out = new FileOutputStream(&quot;F://测试导出Dept列表.xls&quot;);</span><br><span class=\"line\">//        ex.exportExcel(&quot;Dept列表&quot;,headerTitle,headers, list, out);</span><br><span class=\"line\">//        out.close();</span><br><span class=\"line\">//        JOptionPane.showMessageDialog(null, &quot;导出成功!&quot;);</span><br><span class=\"line\">//        System.out.println(&quot;excel导出成功！&quot;);</span><br><span class=\"line\">//    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>just for test</p>\n<p>啊啊 啊  考虑了</p>\n<p>你是谁&gt;….;;;;;rr方法。。。。。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ExportExcelUtil\"><a href=\"#ExportExcelUtil\" class=\"headerlink\" title=\"ExportExcelUtil\"></a>ExportExcelUtil</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package cn.onebank.ucg.utils;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.beans.PropertyDescriptor;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import java.text.SimpleDateFormat;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Collection;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.regex.Matcher;</span><br><span class=\"line\">import java.util.regex.Pattern;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFCell;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFCellStyle;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFClientAnchor;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFFont;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFPatriarch;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFRichTextString;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFRow;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFSheet;</span><br><span class=\"line\">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class=\"line\">import org.apache.poi.hssf.util.HSSFColor;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\">import org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class ExportExcelUtil&lt;T&gt; &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">   public String[] exportExcelHeader(Class&lt;T&gt; clz)&#123;</span><br><span class=\"line\">\t\tField fields[] = clz.getDeclaredFields(); </span><br><span class=\"line\">   \t \tString[] name = new String[fields.length]; </span><br><span class=\"line\">        try&#123; </span><br><span class=\"line\">\t        Field.setAccessible(fields,true); </span><br><span class=\"line\">\t        for (int i = 1; i &lt; fields.length; i++)   &#123; </span><br><span class=\"line\">                name[i] = fields[i].getName(); </span><br><span class=\"line\">                System.out.println(name[i] + &quot;-&gt; &quot;); </span><br><span class=\"line\">\t        &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        catch(Exception e)&#123; </span><br><span class=\"line\">            e.printStackTrace(); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        return name;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   public void exportExcel(Collection&lt;T&gt; dataset, OutputStream out) &#123;</span><br><span class=\"line\">      exportExcel(&quot;导出EXCEL文档&quot;, null,null, dataset, out, &quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void exportExcel(String[] headers, Collection&lt;T&gt; dataset,</span><br><span class=\"line\">           OutputStream out) &#123;</span><br><span class=\"line\">       exportExcel(&quot;导出EXCEL文档&quot;, null,headers, dataset, out, &quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void exportExcel(String title, String[] headers,</span><br><span class=\"line\">           Collection&lt;T&gt; dataset, OutputStream out) &#123;</span><br><span class=\"line\">       exportExcel(title,null, headers, dataset, out, &quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   public void exportExcel(String title,String[] headerTitle, String[] headers,</span><br><span class=\"line\">           Collection&lt;T&gt; dataset, OutputStream out) &#123;</span><br><span class=\"line\">       exportExcel(title,headerTitle, headers, dataset, out, &quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void exportExcel(String[] headerTitle,String[] headers, Collection&lt;T&gt; dataset,</span><br><span class=\"line\">           OutputStream out, String pattern) &#123;</span><br><span class=\"line\">       exportExcel(&quot;导出EXCEL文档&quot;,headerTitle, headers, dataset, out, pattern);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   /**</span><br><span class=\"line\">    * 这是一个通用的方法，利用了JAVA的反射机制，可以将放置在JAVA集合中并且符号一定条件的数据以EXCEL 的形式输出到指定IO设备上</span><br><span class=\"line\">    * </span><br><span class=\"line\">    * @param title</span><br><span class=\"line\">    *            表格标题名</span><br><span class=\"line\">    *  @param headerTitle</span><br><span class=\"line\">    *  \t\t\t表格属性列名数组（标题）若为null，默认显示headers</span><br><span class=\"line\">    * @param headers</span><br><span class=\"line\">    *            表格属性列名数组</span><br><span class=\"line\">    * @param dataset</span><br><span class=\"line\">    *            需要显示的数据集合,集合中一定要放置符合javabean风格的类的对象。此方法支持的</span><br><span class=\"line\">    *            javabean属性的数据类型有基本数据类型及String,Date,byte[](图片数据)</span><br><span class=\"line\">    * @param out</span><br><span class=\"line\">    *            与输出设备关联的流对象，可以将EXCEL文档导出到本地文件或者网络中</span><br><span class=\"line\">    * @param pattern</span><br><span class=\"line\">    *            如果有时间数据，设定输出格式。默认为&quot;yyy-MM-dd&quot;</span><br><span class=\"line\">    */</span><br><span class=\"line\">   @SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;deprecation&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class=\"line\">   public void exportExcel(String title,String[] headerTitle, String[] headers,</span><br><span class=\"line\">           Collection&lt;T&gt; dataset, OutputStream out, String pattern) &#123;</span><br><span class=\"line\">       // 声明一个工作薄</span><br><span class=\"line\">       HSSFWorkbook workbook = new HSSFWorkbook();</span><br><span class=\"line\">       // 生成一个样式</span><br><span class=\"line\">       HSSFCellStyle style = workbook.createCellStyle();</span><br><span class=\"line\">       // 设置这些样式</span><br><span class=\"line\">       style.setFillForegroundColor(HSSFColor.WHITE.index);</span><br><span class=\"line\">       style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);</span><br><span class=\"line\">       style.setBorderBottom(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style.setBorderLeft(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style.setBorderRight(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style.setBorderTop(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span><br><span class=\"line\">       // 生成一个字体</span><br><span class=\"line\">       HSSFFont font = workbook.createFont();</span><br><span class=\"line\">       font.setColor(HSSFColor.BLACK.index);</span><br><span class=\"line\">       font.setFontHeightInPoints((short) 12);</span><br><span class=\"line\">       font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);</span><br><span class=\"line\">       // 把字体应用到当前的样式</span><br><span class=\"line\">       style.setFont(font);</span><br><span class=\"line\">       // 生成并设置另一个样式</span><br><span class=\"line\">       HSSFCellStyle style2 = workbook.createCellStyle();</span><br><span class=\"line\">       style2.setFillForegroundColor(HSSFColor.WHITE.index);</span><br><span class=\"line\">       style2.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);</span><br><span class=\"line\">       style2.setBorderBottom(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style2.setBorderLeft(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style2.setBorderRight(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style2.setBorderTop(HSSFCellStyle.BORDER_THIN);</span><br><span class=\"line\">       style2.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span><br><span class=\"line\">       style2.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);</span><br><span class=\"line\">       // 生成另一个字体</span><br><span class=\"line\">       HSSFFont font2 = workbook.createFont();</span><br><span class=\"line\">       font2.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL);</span><br><span class=\"line\">       // 把字体应用到当前的样式</span><br><span class=\"line\">       style2.setFont(font2);</span><br><span class=\"line\"></span><br><span class=\"line\">       int sheetCount = 1000;</span><br><span class=\"line\">       if (dataset.size() &gt; sheetCount) &#123;</span><br><span class=\"line\">           Iterator&lt;T&gt; it = dataset.iterator();</span><br><span class=\"line\">           for (int i = 0; i &lt;= 4; i++) &#123;</span><br><span class=\"line\">               int index = 0;</span><br><span class=\"line\">               List&lt;T&gt; list = new ArrayList&lt;T&gt;();</span><br><span class=\"line\">               while (it.hasNext()) &#123;</span><br><span class=\"line\">                   index++;</span><br><span class=\"line\">                   if (index &lt; sheetCount) &#123;</span><br><span class=\"line\">                       list.add(it.next());</span><br><span class=\"line\">                   &#125; else &#123;</span><br><span class=\"line\">                       break;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">\t\t\t\t\tgenerateSheet(list, style, style2, workbook, pattern,headerTitle, headers,</span><br><span class=\"line\">\t\t\t\t\t        title + &quot;_&quot; + (i + 1));</span><br><span class=\"line\">\t\t\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           try &#123;</span><br><span class=\"line\">\t\t\t\tgenerateSheet(dataset, style, style2, workbook, pattern,headerTitle, headers,</span><br><span class=\"line\">\t\t\t\t        title);</span><br><span class=\"line\">\t\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           workbook.write(out);</span><br><span class=\"line\">       &#125; catch (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125;finally&#123;</span><br><span class=\"line\">       \ttry &#123;</span><br><span class=\"line\">\t\t\t\tout.close();</span><br><span class=\"line\">\t\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void generateSheet(Collection&lt;T&gt; dataset, HSSFCellStyle style,</span><br><span class=\"line\">           HSSFCellStyle style2, HSSFWorkbook workbook, String pattern,</span><br><span class=\"line\">           String[] headerTitle,String[] headers, String title) throws Exception &#123;</span><br><span class=\"line\">       // 生成一个表格</span><br><span class=\"line\">       HSSFSheet sheet = workbook.createSheet(title);</span><br><span class=\"line\">       // 设置表格默认列宽度为15个字节</span><br><span class=\"line\">       sheet.setDefaultColumnWidth((short) 15);</span><br><span class=\"line\">       // 声明一个画图的顶级管理器</span><br><span class=\"line\">       HSSFPatriarch patriarch = sheet.createDrawingPatriarch();</span><br><span class=\"line\">       // 定义注释的大小和位置,详见文档</span><br><span class=\"line\">      /* HSSFComment comment = patriarch.createComment(new HSSFClientAnchor(0,</span><br><span class=\"line\">               0, 0, 0, (short) 4, 2, (short) 6, 5));</span><br><span class=\"line\">       // 设置注释内容</span><br><span class=\"line\">       comment.setString(new HSSFRichTextString(&quot;可以在POI中添加注释！&quot;));</span><br><span class=\"line\">       // 设置注释作者，当鼠标移动到单元格上是可以在状态栏中看到该内容.</span><br><span class=\"line\">       comment.setAuthor(&quot;author&quot;);*/</span><br><span class=\"line\">       // 产生表格标题行</span><br><span class=\"line\">       HSSFRow row = sheet.createRow(0);</span><br><span class=\"line\">       String[] showTitle = headers;</span><br><span class=\"line\">       if(!StringUtils.isEmpty(headerTitle)) showTitle = headerTitle;</span><br><span class=\"line\">       int indexTitle = 0;//excel列下标</span><br><span class=\"line\">       for (short i = 0; i &lt; showTitle.length; i++) &#123;</span><br><span class=\"line\">       \tif(StringUtils.isEmpty(showTitle[i])) continue;</span><br><span class=\"line\">           HSSFCell cell = row.createCell(indexTitle);</span><br><span class=\"line\">           cell.setCellStyle(style);</span><br><span class=\"line\">           HSSFRichTextString text = new HSSFRichTextString(showTitle[i]);</span><br><span class=\"line\">           cell.setCellValue(text);</span><br><span class=\"line\">           indexTitle++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       if(StringUtils.isEmpty(dataset)) return;</span><br><span class=\"line\">       // 遍历集合数据，产生数据行</span><br><span class=\"line\">       Iterator&lt;T&gt; it = dataset.iterator();</span><br><span class=\"line\">       int index = 0;</span><br><span class=\"line\">       while (it.hasNext()) &#123;</span><br><span class=\"line\">           index++;</span><br><span class=\"line\">           row = sheet.createRow(index);</span><br><span class=\"line\">           T t = (T) it.next();</span><br><span class=\"line\">           Class tCls = t.getClass();</span><br><span class=\"line\">           Method[] methods=t.getClass().getMethods();</span><br><span class=\"line\">           // 利用反射，根据javabean属性的先后顺序，动态调用getXxx()方法得到属性值</span><br><span class=\"line\">           Field[] fields=new Field[headers.length];</span><br><span class=\"line\">          </span><br><span class=\"line\">           for (short j = 0; j &lt; headers.length; j++) &#123;</span><br><span class=\"line\">           \tif(StringUtils.isEmpty(headers[j]))  continue;</span><br><span class=\"line\">           \tField field1  = tCls.getDeclaredField(headers[j]);</span><br><span class=\"line\">\t\t\t\tfields[j]=field1;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           int indexText = 0;//excel列下标</span><br><span class=\"line\">           for (short i = 0; i &lt; fields.length; i++) &#123;</span><br><span class=\"line\">           \tif(StringUtils.isEmpty(fields[i])) continue;</span><br><span class=\"line\">           \t</span><br><span class=\"line\">               Field field = fields[i];</span><br><span class=\"line\">               HSSFCell cell = row.createCell(indexText);</span><br><span class=\"line\">              </span><br><span class=\"line\">               cell.setCellStyle(style2);</span><br><span class=\"line\">               </span><br><span class=\"line\">               String fieldName = field.getName();</span><br><span class=\"line\">               PropertyDescriptor pd=new PropertyDescriptor(fieldName,tCls);</span><br><span class=\"line\">               Method getMethod=pd.getReadMethod();</span><br><span class=\"line\">               Object value = getMethod.invoke(t, new Object[] &#123;&#125;);</span><br><span class=\"line\">               // 判断值的类型后进行强制类型转换</span><br><span class=\"line\">               String textValue = null;</span><br><span class=\"line\">               if (value instanceof Boolean) &#123;</span><br><span class=\"line\">                   boolean bValue = (Boolean) value;</span><br><span class=\"line\">                   textValue = &quot;是&quot;;</span><br><span class=\"line\">                   if (!bValue) textValue = &quot;否&quot;;</span><br><span class=\"line\">               &#125; else if (value instanceof Date) &#123;</span><br><span class=\"line\">                   Date date = (Date) value;</span><br><span class=\"line\">                   SimpleDateFormat sdf = new SimpleDateFormat(pattern);</span><br><span class=\"line\">                   textValue = sdf.format(date);</span><br><span class=\"line\">               &#125; else if (value instanceof byte[]) &#123;</span><br><span class=\"line\">                   // 有图片时，设置行高为60px;</span><br><span class=\"line\">                   row.setHeightInPoints(60);</span><br><span class=\"line\">                   // 设置图片所在列宽度为80px,注意这里单位的一个换算</span><br><span class=\"line\">                   sheet.setColumnWidth(indexText, (short) (35.7 * 80));</span><br><span class=\"line\">                   // sheet.autoSizeColumn(i);</span><br><span class=\"line\">                   byte[] bsValue = (byte[]) value;</span><br><span class=\"line\">                   HSSFClientAnchor anchor = new HSSFClientAnchor(0, 0,</span><br><span class=\"line\">                           1023, 255, (short) 6, index, (short) 6, index);</span><br><span class=\"line\">                   anchor.setAnchorType(2);</span><br><span class=\"line\">                   patriarch.createPicture(anchor, workbook.addPicture(</span><br><span class=\"line\">                           bsValue, HSSFWorkbook.PICTURE_TYPE_JPEG));</span><br><span class=\"line\">               &#125;  else &#123;</span><br><span class=\"line\">                   // 其它数据类型都当作字符串简单处理</span><br><span class=\"line\">                   if (value == null)   value = &quot;&quot;;</span><br><span class=\"line\">                   </span><br><span class=\"line\">                   textValue = value.toString();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               // 如果不是图片数据，就利用正则表达式判断textValue是否全部由数字组成</span><br><span class=\"line\">               if (textValue != null) &#123;</span><br><span class=\"line\">                   Pattern p = Pattern.compile(&quot;^//d+(//.//d+) &#123;1&#125;quot;&quot;);</span><br><span class=\"line\">                   Matcher matcher = p.matcher(textValue);</span><br><span class=\"line\">                   if (matcher.matches()) &#123;</span><br><span class=\"line\">                       // 是数字当作double处理</span><br><span class=\"line\">                       cell.setCellValue(Double.parseDouble(textValue));</span><br><span class=\"line\">                   &#125; else &#123;</span><br><span class=\"line\">                       HSSFRichTextString richString = new HSSFRichTextString(</span><br><span class=\"line\">                               textValue);</span><br><span class=\"line\">                       HSSFFont font3 = workbook.createFont();</span><br><span class=\"line\">                       font3.setColor(HSSFColor.BLACK.index);</span><br><span class=\"line\">                       richString.applyFont(font3);</span><br><span class=\"line\">                       cell.setCellValue(richString);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               indexText++;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">//   \t ExportExcelUtil&lt;Dept&gt; ex = new ExportExcelUtil&lt;Dept&gt;();</span><br><span class=\"line\">////   \t String[] headers = ex.exportExcelHeader(MenuVo.class);</span><br><span class=\"line\">//        List&lt;Dept&gt; list = new ArrayList&lt;Dept&gt;();//(List&lt;MenuVo&gt;) hashMap.get(&quot;list&quot;);</span><br><span class=\"line\">//        Dept dept = new Dept();</span><br><span class=\"line\">//        dept.setId(1);</span><br><span class=\"line\">//        dept.setNum(1);</span><br><span class=\"line\">//        dept.setPid(0);</span><br><span class=\"line\">//        dept.setPids(&quot;pids&quot;);</span><br><span class=\"line\">//        dept.setSimplename(&quot;jiancheng&quot;);</span><br><span class=\"line\">//        dept.setFullname(&quot;quancheng&quot;);</span><br><span class=\"line\">//        dept.setTips(&quot;tishi&quot;);</span><br><span class=\"line\">//        dept.setVersion(1);</span><br><span class=\"line\">//        list.add(dept);</span><br><span class=\"line\">//        String[] headerTitle = &#123;&quot;主键id&quot;,&quot;排序&quot;,&quot;父部门id&quot;,&quot;父级ids&quot;,&quot;简称&quot;,&quot;版本&quot;&#125;;</span><br><span class=\"line\">//        String[] headers = &#123;&quot;id&quot;,&quot;num&quot;,&quot;pid&quot;,&quot;pids&quot;,&quot;simplename&quot;,&quot;version&quot;&#125;;</span><br><span class=\"line\">//        OutputStream out = new FileOutputStream(&quot;F://测试导出Dept列表.xls&quot;);</span><br><span class=\"line\">//        ex.exportExcel(&quot;Dept列表&quot;,headerTitle,headers, list, out);</span><br><span class=\"line\">//        out.close();</span><br><span class=\"line\">//        JOptionPane.showMessageDialog(null, &quot;导出成功!&quot;);</span><br><span class=\"line\">//        System.out.println(&quot;excel导出成功！&quot;);</span><br><span class=\"line\">//    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>just for test</p>\n<p>啊啊 啊  考虑了</p>\n<p>你是谁&gt;….;;;;;rr方法。。。。。</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}